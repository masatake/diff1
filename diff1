#!/bin/bash
#
########################################################################
#
# diff1: Taking diff between a given file with something its original
#
# Copyright (C) 2011 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

__pkg_backends=rpm
__reporters=diff
__cache_dir=

_data_file=
_path=
__package=
__track_unknown_entities=no

pkg_backend=rpm
reporter=diff
diff_flags=
yumdownloader_flags=
rpm_ignore_vr=
rpm_file=
root=
list=
mtime=
quiet=
ignore_overrides=

function print_usage
{
    echo "Usage: "
    echo "	$0 --help|-h"
    echo "	$0  [--mtime] DATA_FILE"
    echo "	$0  [--list|-l] [--mtime] DATA_DIR"
    echo "	$0  [--mtime] --path=PATH|--root=ROOT DATA_{FILE|DIRECTORY}"
    echo "	$0  [--track-unknown-entities|-t] --package=PACKAGE"
    echo
    echo "COMMON OPTIONS: "
    echo "	[--yumdownloader-flags=YUMDOWNLOADER_FLAGS]"
    echo "	[--diff-flags=DIFF_FLAGS]"
    echo "	[--rpm-ignore-vr]"
    echo "	[--rpm-file=RPM_FILE]"
    echo "	[--quiet]"
    echo
    echo "List Notation:"
    echo "	M --- Modified managed by rpm"
    echo "	- --- Not modified, managed by rpm"
    echo "	B --- Backup file taken by rpm"
    echo "	X --- External, not managed by rpm"
    echo
    echo "Example: "
    echo "	$0 /etc/passwd"
    echo "	$0 --list /etc/sysconfig"
    echo "	$0 /etc/sysconfig"
    echo "	$0 --package=setup"
    echo "	$0 --root=/home/yamato/work/named /home/yamato/work/named/etc/named.conf"
    echo "	$0 --path=/etc/passwd /home/yamato/work/setup/my-passwd"
}

function parse_arguments
{
    local df
    local ydf
    local path

    while [ $# -gt 0 ]; do
	case "$1" in
	    -h|--help)
		print_usage
		exit 0
		;;
	    --rpm-ignore-vr)
		rpm_ignore_vr=yes
		;;
	    --rpm-file=*)
	        rpm_file=${1/--rpm-file=/}
		if ! [ -f "$rpm_file" ]; then
		    echo "$0: not a regular file: $rpm_file" 1>&2
		    exit 2
		fi
		;;
	    --diff-flags=*)
	        df=${1/--diff-flags=/}
		diff_flags="${diff_flags} ${df}"
		;;
	    --yumdownloader-flags=*)
	        ydf=${1/--yumdownloader-flags=/}
		yumdownloader_flags="${yumdownloader_flags} ${ydf}"
		;;
	    --root=*)
	        root=${1/--root=/}
		if ! [ -d "${root}" ]; then
		    echo "$0: No such directory: ${root}" 1>&2
		    exit 2
		fi
		;;
	    --path=*)
	        path=${1/--path=/}
		if ! [ -f "$path" ]; then
		    echo "$0: no file for $path" 1>&2
		    exit 2
		fi
		;;
	     -l|--list)
	        list=yes
		;;
	     --mtime)
	        mtime=yes
		;;
	    --package=*)
	        __package=${1/--package=}
		if ! rpm -qi "${__package}" > /dev/null 2>&1; then
		    echo "$0: no such package" 1>&2
		    exit 2
		fi
		;;
	    --quiet)
	        quiet=1
		;;
	    --ignore-overrides)
	        ignore_overrides=1
		;;
	    --track-unknown-entities|-t)
		__track_unknown_entities=yes
		;;
	    *)
		break
		;;
	esac
	shift
    done

    if [ -n "${__package}" ]; then
	return
    fi

    if [ $# = 0 ]; then
	echo "$0: missing file" 1>&2
	print_usage 1>&2
	exit 2
    elif [ $# != 1 ]; then
	echo "$0: too many files" 1>&2
	exit 2
    fi

    if [ -n "${root}" ] && [ -n "${path}" ]; then
	echo "Specify ether --root= or --path= at once" 1>&2
	print_usage 1>&2
	exit 2
    fi
    if [ -n "${root}" ] && [ "${list}" = yes ]; then
	echo "Don't combine --root and --list option" 1>&2
	exit 2
    fi
    if [ -n "${path}" ] && [ "${list}" = yes ]; then
	echo "Don't combine --path and --list option" 1>&2
	exit 2
    fi

    _data_file=$1
    shift
    if [ -z "${_data_file}" ]; then
	echo "Empty string is given as argument for _data_file" 1>&2
	exit 2
    fi
    if ! [ -e $_data_file ]; then
	echo "$0: no such file: $_data_file" 1>&2
	exit 2
    fi

    if [ -f $_data_file ]; then
	if [ "${list}" = yes ]; then
	    echo "Don't use -l|--list option with a file" 1>&2
	    exit 2
	fi
	if [ -z "$diff_flags" ]; then
	    diff_flags=-ru
	fi
    elif [ -d $_data_file ]; then
	if [ -z "$diff_flags" ]; then
	    diff_flags=-ruN
	fi
    else
	echo " $0: not a regular file nor a directory: $_data_file" 1>&2
	exit 2
    fi

    if ! [ -r $_data_file ]; then
	echo "=== $0: no readable: $_data_file" 1>&2
	exit 2
    fi

    if [ ${_data_file:0:1} != "/" ]; then
	_data_file=$(readlink --canonicalize "$(pwd)/${_data_file}")
    else
	_data_file=$(readlink --canonicalize "$_data_file")
    fi

    if [ -n "${path}" ]; then
	_path=$(readlink --canonicalize ${path})
    elif [ -n "${root}" ]; then
	local prefix=${_data_file:0:${#root}}
	if [ "$prefix" != "${root}" ]; then
	    echo "$0: DATA-FILE(${_data_file}) is not at somewhere under ROOT(${root})" 1>&2
	    exit 2
	fi
	path=${_data_file:${#root}}
	if [ -f "$path" ]; then
	    :
	elif [ -d "$path" ]; then
	    :
	else
	    echo "$0: no such file or directory: $path derived from ROOT(${root} and DATA-FILE(${_data_file})" 1>&2
	    exit 2
	fi
	_path=$(readlink --canonicalize ${path})
    else
	_path="${_data_file}"
    fi
}

function prepare_cache_dir
{
    mkdir -p ~/.diff1_cache
    __cache_dir=~/.diff1_cache/$pkg_backend
    mkdir -p $__cache_dir
    ${pkg_backend}_prepare_cache_dir $__cache_dir
}

function diff1_package
{
    local package=$1
    shift 1

    local track_unknown_entities=$1
    shift 1

    local files
    local status=0
    
    local f
    local xf


    # files=(`rpm -V ${package} | grep "^..5.........." | sed -e 's/..5..........\(.\+\)/\1/'`)
    files=(`rpm -ql ${package}`)
    for f in ${files[*]}; do

	if [[ -d "$f" ]]; then
	    for xf in $(find "$f"); do
		if ! rpm -qf $xf > /dev/null 2>&1; then
		    if [ -d $xf ]; then
			echo "=== UNKNOWN DIR: " $xf
		    else
			echo "=== UNKNOWN FILE: " $xf
		    fi
		fi
	    done
	    if [[ "$track_unknown_entities" != yes ]]; then
		continue
	    fi
	fi
	$0 "$@" "${f}"
	case $? in
	    0)
		:
		;;
	    1)
		if [ "$status" = 0 ]; then
		    status=1
		fi
		;;
	    2)
		status=2
		break
		;;
	esac
    done

    return $status
}
function main
{
    parse_arguments "$@"


    if [ -z "${__package}" ]; then
	if [ -z "${ignore_overrides}" ]; then
	    if ! which opm > /dev/null 2>&1; then
		echo "cannot find opm command" 1>&2
		exit 2
	    fi
	    if opm -qf $_path > /dev/null 2>&1; then
		pkg_backend=opm
	    else
		pkg_backend=rpm
	    fi
	    
	else
	    pkg_backend=rpm
	fi
	prepare_cache_dir
	${pkg_backend}_diff1 $_data_file $_path
    else
	local p=${*/--package=*}
	p=${p/-t}
	p=${p/--track-unknown-entities}
	diff1_package "${__package}" "${__track_unknown_entities}" ${p}
    fi
    
    return $?
}

#
# RPM
# TODO: Package name only
#       Given rpm file
# 
function rpm_prepare_cache
{
    local pkg=$1
    local c=$__cache_dir/rpm/${pkg}.rpm
    local r

    if [ -r $c ]; then
	return 0
    else
	yumdownloader ${yumdownloader_flags} --destdir $__cache_dir/rpm $pkg > /dev/null 2>&1
	r=$?
	if [[ $r != 0 ]]; then
	    rm $c
	fi
	return $r
    fi

} 

function mydiff
{
    local omtime
    local nmtime

    if [ "${mtime}" = yes ]; then
	shift $(( $# - 2 ))
	omtime=$(stat -c %y ${1})
	nmtime=$(stat -c %y ${2})
	if [ "${omtime}" = "${nmtime}" ]; then
	    return 0
	else
	    echo "--- ${1}	${omtime}"
	    echo "+++ ${2}	${nmtime}"
	    return 1
	fi
    else
	diff "$@"
	return $?
    fi
}

function rpm_report_diff
{
    local pkg_file=$1
    local file=$2
    local path=$3
    local temp
    local status


    if ! temp=$(mktemp --directory --suffix=-diff1-rpm); then
	echo "$0 failed in mktemp" 1>&2
	return 2
    fi
    trap "cd /tmp; chmod -R u+w $temp; /bin/rm -rf $temp" 0    

    if ! rpm2cpio $pkg_file | ( cd $temp; cpio -dim ) > /dev/null 2>&1; then
	echo "failed in rpm2cpio/cpio" 1>&2
	return 2
    fi

    if ! [ -e $temp/$path ]; then
	echo "=== cannot find $file in rpm archive($pkg_file)" 1>&2
	return 2
    fi

    if [ -f $file ] || ( [ -d $file ] && [ $file != $path ] ); then
	(
	    cd $temp
	    # echo "=== diff ${diff_flags} ${path:1} $file # (pwd: $temp)"
	    mydiff ${diff_flags} ${path:1} $file 
	    exit $?
	)
	status=$?
	if [ $status = 0 ]; then
	    if [ "${path}" = "${file}" ]; then
		[ -z "$quiet" ] && echo "=== NO CHANGE in $file"
	    else
		[ -z "$quiet" ] && echo "=== NO CHANGE in $path -> $file"
	    fi
	fi
    elif [ "$list" = yes ]; then
	local elt
	local r
	status=0
	for elt in ${file}/*; do
	    if [ -e $temp/$path/${elt:${#file}} ]; then
		mydiff ${diff_flags} $temp/$path/${elt:${#file}} ${elt} > /dev/null 2>&1
		r=$?
		if [ $r != 0 ]; then
		    echo "M ${elt}	($(rpm -qf ${elt} | tr '\n' ' '))"
		fi
		if [ $status = 0 ]; then
		    status=$r
		fi
	    elif rpm -qf ${elt} > /dev/null 2>&1; then
		echo "- ${elt}	($(rpm -qf ${elt} | tr '\n' ' '))"
	    elif [[ ${elt} =~ (.*)\.rpmsave$ ]] \
	      || [[ ${elt} =~ (.*)\.rpmnew$ ]]  \
	      || [[ ${elt} =~ (.*)\.rpmorig$ ]]; then
		echo "B ${elt}	($(rpm -qf ${BASH_REMATCH[1]} | tr '\n' ' '))"
	    else
		mydiff ${diff_flags} /dev/null ${elt} > /dev/null 2>&1
		r=$?
		if [ $r != 0 ]; then
		    echo "X ${elt}"
		fi
		if [ $status = 0 ]; then
		    status=$r
		fi
	    fi
	done
    else
	# TODO: Merge above block and this block
	local elt
	local r
	status=0
	for elt in ${file}/*; do
	    if [ -e ${temp}${path}${elt:${#file}} ]; then
		(
		    cd ${temp}
		    mydiff ${diff_flags} ${path:1}${elt:${#file}} ${elt}
		    exit $?
		)
		    
		r=$?
		if [ $status = 0 ]; then
		    status=$r
		fi
	    elif rpm -qf ${elt} > /dev/null 2>&1; then
		echo "=== Skip ${elt} because it is owned by $(rpm -qf ${elt})"
	    elif [[ ${elt} == *.rpmsave ]] \
	      || [[ ${elt} == *.rpmnew ]]  \
	      || [[ ${elt} == *.rpmorig ]]; then
		echo "=== Skip ${elt} because it may be generated by rpm command"
	    elif [[ -d ${elt} ]]; then
		echo "=== Skip ${elt} because it is a directory"
	    else
		echo "=== Compare ${elt} with /dev/null because it is not owned by any package"
		mydiff ${diff_flags} /dev/null ${elt}
		r=$?
		if [ $status = 0 ]; then
		    status=$r
		fi
	    fi
	done
    fi

    chmod -R u+w $temp
    rm -rf $temp
    return $status
}

function rpm_resolve_pkg
{
    local pkg_name=$1
    local output=

    if ! output=$(yumdownloader ${yumdownloader_flags} \
	            --quiet                            \
	            --urls $pkg_name 2> /dev/null); then
	return 2
    fi

    basename $output .rpm
}

function count
{
    return $#
}

function rpm_retrieve_pkg
{
    local file=$1
    local ignore_vr=$2
    local pkg
    local pkg_name

    if ! file=$(readlink -f $file); then
	echo "$0: failed in readlink $1" 1>&2
	return 2
    fi

    if ! pkg=$(rpm -qf $file); then
	echo "$0: rpm does not manage $file" 1>&2
	return 2
    fi

    # 
    # handling the case that $file is shared by more than two packages.
    # Needs more work.
    #
    local p p0 f0
    count $pkg
    if [ $? -gt 1 ]; then
	while read p0 f0; do
	    if [ -z "$f0" ]; then
		p=$p0
		break
	    fi
	done < <(rpm -q --queryformat "%{NAME} %{FILEFLAGS:fflags}\n" -f $file)
	if [ -z "$p" ]; then
	    pkg=$(head -1<<<"$pkg")
	else
	    pkg=$(grep $p<<<"$pkg")
	fi
    fi


    if rpm_prepare_cache $pkg ; then
	echo $__cache_dir/rpm/${pkg}.rpm
	return 0
    elif [ "${ignore_vr}" = yes ]; then
	if ! pkg_name=$(rpm -q --qf "%{name}" $pkg); then
	    echo "$0: cannot get the name of package: $pkg" 1>&2
	    return 2
	fi
	
	if ! pkg=$(rpm_resolve_pkg ${pkg_name}) ; then
	    echo "$0: cannot get package nvr for: $pkg_name" 1>&2
	    return 2
	fi

	if rpm_prepare_cache $pkg; then
	    echo $__cache_dir/rpm/${pkg}.rpm
	    return 0
	else
	    echo "$0: failed in download $pkg" 1>&2
	    return 2
	fi
    else
	echo "$0: failed in download $pkg" 1>&2
	return 2
    fi
}

function rpm_diff1
{
    local file=$1
    local path=$2
    local pkg_file

    if [ -n "${rpm_file}" ]; then
	pkg_file=${rpm_file}
    else
	if pkg_file=$(rpm_retrieve_pkg $path $rpm_ignore_vr); then
	    :
	else
	    return 2
	fi
    fi
    rpm_report_${reporter} $pkg_file $file $path
    
    return $?
}

function rpm_prepare_cache_dir
{
    mkdir -p $__cache_dir/rpm
}


#
# OPM
# 
function opm_build_path 
{
    local pkg=$1
    local path=$2
    
    echo "/var/lib/${pkg}/new$path"
}

function opm_diff1
{
    local file=$1
    local path=$2
    local pkg

    pkg=$(opm -qf $path)
    opm_report_${reporter} $(opm_build_path "$pkg" "$path") $file
    return $?
}

function opm_report_diff
{
    local old=$1
    local new=$2

    mydiff ${diff_flags} "$old" "$new"
    return $?
}

function opm_prepare_cache_dir
{
    return 0
}

main "$@"
exit $?
