#!/bin/bash
#
########################################################################
#
# diff1: Taking diff between a given file with something its original
#
# Copyright (C) 2011 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

__pkg_backends=rpm
__reporters=diff
__cache_dir=

_data_file=
_path=

pkg_backend=rpm
reporter=diff
diff_flags=
yumdownloader_flags=
rpm_ignore_vr=
rpm_file=
root=


function print_usage
{
    echo "Usage: "
    echo "	$0 --help|-h"
    echo "	$0 [--yumdownloader-flags=YUMDOWNLOADER_FLAGS] [--diff-flags=DIFF_FLAGS] \\"
    echo "         [--rpm-ignore-vr] [--rpm-file=RPM_FILE] [--path=PATH|--root=ROOT] DATA_FILE"
    echo "Example: "
    echo "	$0 /etc/passwd"
    echo "	$0 --root=/home/yamato/work/named /home/yamato/work/named/etc/named.conf"
    echo "	$0 --path=/etc/passwd /home/yamato/work/setup/my-passwd"
}

function parse_arguments
{
    local df
    local ydf
    local path
    
    while [ $# -gt 0 ]; do
	case "$1" in
	    -h|--help)
		print_usage
		exit 0
		;;
	    --rpm-ignore-vr)
		rpm_ignore_vr=yes
		;;
	    --rpm-file=*)
	        rpm_file=${1/--rpm-file=/}
		if ! [ -f "$rpm_file" ]; then
		    echo "$0: not a regular file: $rpm_file" 1>&2
		    exit 2
		fi
		;;
	    --diff-flags=*)
	        df=${1/--diff-flags=/}
		diff_flags="${diff_flags} ${df}"
		;;
	    --yumdownloader-flags=*)
	        ydf=${1/--yumdownloader-flags=/}
		yumdownloader_flags="${yumdownloader_flags} ${ydf}"
		;;
	    --root=*)
	        root=${1/--root=/}
		if ! [ -d "${root}" ]; then
		    echo "$0: No such directory: ${root}" 1>&2
		    exit 2
		fi
		;;
	    --path=*)
	        path=${1/--path=/}
		if ! [ -f "$path" ]; then
		    echo "$0: no file for $path" 1>&2
		    exit 2
		fi
		;;
	    *)
		break
		;;
	esac
	shift
    done

    if [ $# = 0 ]; then
	echo "$0: missing file" 1>&2
	print_usage 1>&2
	exit 2
    elif [ $# != 1 ]; then
	echo "$0: too many files" 1>&2
	exit 2
    fi

    if [ -n "${root}" ] && [ -n "${path}" ]; then
	echo "Specify ether --root= or --path= at once" 1>&2
	print_usage 1>&2
	exit 2
    fi

    _data_file=$1
    _path="$_data_file"
    shift
    
    if ! [ -e $_data_file ]; then
	echo "$0: no such file: $_data_file" 1>&2
	exit 2
    fi
    if ! [ -f $_data_file ]; then
	echo "$0: not a regular file: $_data_file" 1>&2
	exit 2
    fi
    if ! [ -r $_data_file ]; then
	echo "$0: no readable: $_data_file" 1>&2
	exit 2
    fi

    if [ -z "$diff_flags" ]; then
	diff_flags=-uN
    fi

    if [ -n "${path}" ]; then
	_path=${path}
    elif [ -n "${root}" ]; then
	local prefix=${_data_file:0:${#root}}
	if [ "$prefix" != "${root}" ]; then
	    echo "$0: DATA-FILE(${_data_file}) is not at somewhere under ROOT(${root})" 1>&2
	    exit 2
	fi
	path=${_data_file:${#root}}
	if ! [ -f "$path" ]; then
	    echo "$0: no such file: $path derived from ROOT(${root} and DATA-FILE(${_data_file})" 1>&2
	    exit 2
	fi
	_path=${path}
    fi
}

function prepare_cache_dir
{
    mkdir -p ~/.diff1_cache
    __cache_dir=~/.diff1_cache/$pkg_backend
    mkdir -p $__cache_dir
    ${pkg_backend}_prepare_cache_dir $__cache_dir
}

function main
{
    parse_arguments "$@"

    prepare_cache_dir
    
    ${pkg_backend}_diff1 $_data_file $_path
    return $?
}

#
# RPM
# TODO: Package name only
#       Given rpm file
# 
function rpm_prepare_cache
{
    local pkg=$1

    if [ -r $__cache_dir/rpm/${pkg}.rpm ]; then
	return 0
    else
	yumdownloader ${yumdownloader_flags} --destdir $__cache_dir/rpm $pkg
	return $?
    fi

} > /dev/null 2>&1

function rpm_report_diff
{
    local pkg_file=$1
    local file=$2
    local path=$3
    local temp
    local status


    if ! temp=$(mktemp --directory --suffix=-diff1-rpm); then
	echo "$0 failed in mktemp" 1>&2
	return 2
    fi

    if ! rpm2cpio $pkg_file | ( cd $temp; cpio -dim ) > /dev/null 2>&1; then
	echo "failed in rpm2cpio/cpio" 1>&2
	return 2
    fi

    if ! [ -f $temp/$path ]; then
	echo "cannot find $file in rpm archive($pkg_file)" 1>&2
	return 2
    fi

    echo " # diff ${diff_flags} $temp/$path $file "
    diff ${diff_flags} $temp/$path $file 
    status=$?
    if [ $status = 0 ]; then
	if [ "${path}" = "${file}" ]; then
	    echo " # NO CHANGE in $file"
	else
	    echo " # NO CHANGE in $path -> $file"
	fi
    fi

    rm -rf $temp
    return $status
}

function rpm_resolve_pkg
{
    local pkg_name=$1
    local output=

    if ! output=$(yumdownloader ${yumdownloader_flags} 
	    --quiet
	    --urls $pkg_name 2> /dev/null); then
	return 2
    fi

    basename $output .rpm
}

function rpm_retrieve_pkg
{
    local file=$1
    local ignore_vr=$2
    local pkg
    local pkg_name

    if ! file=$(readlink -f $file); then
	echo "$0: failed in readlink $1" 1>&2
	return 2
    fi

    if ! pkg=$(rpm -qf $file); then
	echo "$0: rpm does not manage $file" 1>&2
	return 2
    fi


    if rpm_prepare_cache $pkg ; then
	echo $__cache_dir/rpm/${pkg}.rpm
	return 0
    elif [ "${ignore_vr}" = yes ]; then
	if ! pkg_name=$(rpm -q --qf "%{name}" $pkg); then
	    echo "$0: cannot get the name of package: $pkg" 1>&2
	    return 2
	fi
	
	if ! pkg=$(rpm_resolve_pkg ${pkg_name}) ; then
	    echo "$0: cannot get package nvr for: $pkg_name" 1>&2
	    return 2
	fi

	if rpm_prepare_cache $pkg; then
	    echo $__cache_dir/rpm/${pkg}.rpm
	    return 0
	else
	    echo "$0: failed in download $pkg" 1>&2
	    return 2
	fi
    else
	echo "$0: failed in download $pkg" 1>&2
	return 2
    fi
}

function rpm_diff1
{
    local file=$1
    local path=$2
    local pkg_file

    if [ -n "${rpm_file}" ]; then
	pkg_file=${rpm_file}
    else
	if ! pkg_file=$(rpm_retrieve_pkg $path $rpm_ignore_vr); then
	    return $?
	fi
    fi
    rpm_report_${reporter} $pkg_file $file $path
    
    return $?
}

function rpm_prepare_cache_dir
{
    mkdir -p $__cache_dir/rpm
}



main "$@"
exit $?
